27) Example handling get request at /comments/route.ts
28) Example handling post request at /comments/route.ts
29) Dynamic Route handler example in /comments/[id]/route.ts
30) PATCH and DELETE requests examples in /comments/[id]/route.ts
31) Query parameters handling example in /comments/route.ts
32) Redirect example in /comments/[id]/route.ts
33) Headers in Route Handlsers: HTTP headers represent the metadata associated with an API request and response.
    Request Headers: These are sent by the client, such as a web browser, to the server. They contain essential information about the request,
    which helps the server understand and process it correctly.
    'User-Agent' - which identifies the browser and operating system to the server.
    'Accept' - which indicates the content types like text, video, or image formats that the client can process
    'Authorization' - header used by the client to authenticate itself to the server
    Respond Headers: These are sent back from the server to the client. They provide information about the server and the data being sent in the response.
    'Content-Type' - header which indicates the media type of the response. It tells the client what the data type of the returned contet is, such as 
    text/html for HTML documents, application/json for JSON data, etc.
    Example where we can get Authorization token from headers and add some information to response headers in /profile/api/route.ts
34) How to set and get cookies example in /profile/api/route.ts
35) Caching in Route Handlers: Route Handlers are cached by default when using the GET method with the Response in Next.js
    How to opt out of caching?
    - dynamic mode in Segment Config Option (example see in /time/route.ts)
    - using the Request object with the GET method
    - employing dynamic functions like headers() and cookies()
    - using any HTTP method other than GET
36) Middleware: Middleware in Next.js is a powerful feature that offers a robust way to intercept and control the flow of requests and responses within your
    applications. It does this at a global level significantly enhancing features like redirection, URL rewrites, authentication, headers and cookies management,
    and more. Middleware allows us to specify paths where it will be active
    - Custom mathcer config 
    - Conditional statements
    In summary middlewares in next.js allows you to effectively control and intercept the request-response cicly, enabling redirects, url rewrites and manipulation 
    of headers and cookies. Example in /src/middleware.ts

---------------------------Routing Section Summary----------------------------
Route definition
Pages and layouts
Dynamic routes
Route groups
Linking and Navigation
Handling errors in routes
Parallel and Intercepting routes
Route handlers and middleware

----------------------------------------------------------------------------------

Rendering: Rendering is the process that transforms the code you write into user interfaces. In Next.js, choosing the right time and place to do this rendering is vital
for building a performant application
CSR, SSR and RSCs
Rendering in React -> Rendering in Next.js

Rendering in React
You'will remember React being the go-to library for creating Single Page Applications (SPAs)

Client-side Rendering
This method of rendering, where the component code is transformed into a user interface directly within the browser (the client), is known as client-side rendering (CSR)
CSR quickly became the standart for SPAs, with widespread adoption
It wasn't long before developers began noticing some inherent drawbacks to this approach

Drawbacks of CSR
SEO: Generating HTML that mainly contains a single div tag is not optimal for SEO, as it provides little content for search engines to index
Performance: Having the browser (the client) handle all the work, such as fetching data, computing the UI, and making the HTML interactive, can slow things down.
Users might see a blank screen or a loading spinner while the page loads.
Each new feature added to the application increases the size of the JavaScript bundle, prolonging the wait time for users to see the UI

Recollecting Drawbacks of CSR
Reliance on JavaScript for rendering content on the client side can significantly hurt SEO, as search engines might struggle to index the content properly.
The user experience can suffer form slow load times, as the browser has to download, parce, and execute JavaScript before the user sees any meaningful content
on the page.

Server-side Solutions
It significantly improves SEO because search engines can easily index the server-rendered content.
Users can immediately see the page HTML content, instead of a blank screen or loading spinner.
1. Static Site Generation (SSG)
2. Server-Side Rendering (SSR)
SSG occurs at build time, when the application is deployed on the server. This results in pages that are already rendered and ready to serve. It is ideal
for content that doesn't change often, like blog posts.
SSR, on the other hand, renders pages on-demand in response to user requests. It is suitable for personalized content like social media feeds, where the HTML
depends on the logged-in user.
Server-Side Rendering (SSR) was a significant improvement over Client-Side Rendering (CSR), providing faster initial page loads and beter SEO

Hydration
During hydration, React takes control in the browser, reconstructing the component tree in memory based on the static HTML that was served.
It carefully plans the placement of interactive elements within this tree. Then, React proceeds to bind the necessary JavaScript logic to these elements.
This involves initializing the application state, attaching event handlers for actions such as clicks and mouseovers, and setting up any other dynamic functionalities
required for a fully interactive user experience.

Drawbacks of SSR
1. You have to fetch everything before you can show anything. 
Components cannot start rendering and then pause or "wait" while data is still being loaded.
If a component needs to fetch data from a database or another source (like an API), this fetching must be completed before the server can begin rendering the page.
This can delay the server's response time to the browser, as the client must finish collection all necessary data before any part of the page can be sent to the client.

2. You have to load everything before you can hydrate anything. 
For successful hydration, where React adds interactivity to the server-rendered HTML, the component tree in the browser must exactly match the server-generated component tree.
This means that all the JavaScript for the components must be loaded on the client before you can start hydrating any of them.

3. You have to hydrate everything before you can interact with anything.
React hydrates the component tree in a single pass, meaning once it starts hydrating, it won't stop until it's finished with the entire tree.
As a consequence, all components must be hydrated before you can interact with any of them.

Drawbacks of SSR - All or Nothing Waterfall
1. having to load the data for the entire page
2. load the JavaScript for the entire page, and 
3. hydrate the entire page
create an "all or nothing" waterfall problem that spans from the server to the client, where each issue must be resolved before moving to the next one.
This is inefficient if some parts of your app are slower than others, as is often the case in real-world apps

Drawbacks of SSR - All or Nothing Waterfall
1. Data fetching must be completed before the server can begin rendering HTML
2. The JavaScript required for the components needs to be fully loaded on the client side before the hydration process can start.
3. All components have to be hydrated before they become interactive.
These issues contribute to an 'all-or-nothing' waterfall scenario, resulting in inefficiencies, especially if certain parts of your application are slower than others.

Suspense SSR Architecture
Use the <Suspense> component to unlock two major SSR features:
1. HTML sreaming on the server
2. Selective hydration to the client
Suspense component allows us to not wait before all page will load, besides we can cover main content on Suspense component and it will load later than the other static components.

HTML streaming on the Server 
You don't have to fetch everything before you can show anything.
If a particular section delays the initial HTML, it can be seamlessly integrated into the stream later.
This is the essence of how Suspense facilitates server-side HTML streaming.

The other challenge
Until the JavaScript for the main section is loaded, client-side app hydation cannot start.
And if the JavaScript bundle for the main section is large, this could significantly delay the process

Code splitting
Code Splitting allows you to mark specific code segments as not immediately necessary for loading, signalling your bundler to segregate them into separate '<script>' tags.
Using 'React.lazy' for code splitting enables you to separate the main section's code from the primary JavaScript bundle.
The JavaScript containing React and the code for the entire application, excluding the main section, can now be downloaded independently by the client without having to wait for the main section's code.

Selective Hydration on the Client
By wrapping the main section within '<Suspense>', you've indicated to React that it should not prevent the rest of the page from not just streaming but also from hydrating.
This feature, called SELECTIVE HYDRATION allows for the hydration of secions as they become available, before the rest of the HTML and the JavaScript code are fully downloaded.
Thanks to Selective Hydration, a heavy piece of JS doesn't prevent the rest of the page from becoming interactive.

Selective Hydration on the Client contd.
Selective Hydration offers a solution to the third issue: the necessity to "hydrate everything to interact with anything".
React begins hydration as soon as possible, enabling interactions with elements like the header and side navigation without waiting for the main content to be hydrated.
This process is managed automatically by React.
In scenarios where multiple components are awaiting hydration, React prioritizes hydration based on user interactions.

Drawbacks of Suspense SSR
First, even though JavaScript code is streamed to the browser asynchronously, eventually, the entire code for a web page must be downloaded by the user.
As applications add more features, the amount of code users need to download also grows. This leads to an important question: SHOULD USERS REALLY HAVE TO DOWNLOAD SO MUCH DATA?
Second, the current approach requires that all React components undergo hydration on the client-side, irrespective of their actual need for interactivity.
This process can inefficiently spend resources and extend the loading times and time to interactivity for users, as their devices need to process and render components that might not even require client-side
interaction.
This leads to another question: SHOULD ALL COMPONENTS BE HYDRATED, EVEN THOSE THAT DON'T NEED INTERACTIVITY?
Third, in spite of servers' superior capacity for handling intensive processing tasks, the bulk of JavaScript execution still takes place on the user's device.
This can slow down the performance, expecially on devices that are not very powerful.
This leads to another important question: SHOULD SO MUCH OF THE WORK BE DONE ON THE USER'S DEVICE?

The Evolution of React
CSR -> SSR -> Suspense for SSR
Suspense for SSR brought us closer to a seamless rendering experience.
CHALLENGES
Increased bundle sizes leading to excessive downloads for users
Unnecessary hydration delaying interactivity
Extensive client-side processing that could result in poor performance

React Server Components (RSC)
React Server Components (RSC) represent a new architecture designed by the React team.
This approach aims to leverage strengths of both server and client environments, optimizing for efficiency, load times, and interactivity.
The architecture introduces a dual-component model:
- Client Components
- Server Components
This distinction is not based on the functionality of the components but rather on where they execute and the specific environment they are designed to interact
with.

Client Components
Client Components are the familiar React components we've been using.
They are typically rendered on the client-side (CSR) but, they can also be rendered to HTML on the server (SSR), allowing users to immidiately see the page'S
HTML content rather than a blank screen.
Components that primarily run on the client but (and should) also be executed once on the server as an optimization strategy.

Client Components contd. 
Client Components have access to the client environment, such as the browser, allowing them to use state, effects, and event listeners to handle interactivity and also 
access browser-exclusive APIs like geolocation or localStorage, allowing you to build UI for specific use cases.
In fact, the term "Client Components" doesn't signify anything new; it simply helps differentiate these components from the newly introduced Server Components.

Server Components
Server Components represent a new type of React component specifically designed to operate exclusively on the server.
And unlike client components, their code stays on the server and is never downloaded to the client.
This design choice offers multiple benefits to React applications.

Benefits of Server Components
REDUCED BUNDLE SIZEZ: Server Components do not send code to the client, allowing large dependencies to remain server-side.
This benefits users with slower internet connections or less capable devices by eliminating the need to download, parse, and execute JavaScript for these components.
Additionaly, it removes the hydration step, speeding up app loading and interaction.

DIRECT ACEESS TO SERVER-SIDE RESOURCES: By having direct access to server-side resources like databases or file systems, Server Components enable efficient data fetching
and rendereing without needing additional client-side processing.
Leveraging the server's computational power and proximity to data sources, they manage compute-intensive rendering tasks and send only interactive pieces of code to the client.

ENHANCED SECURITY: Server Components' exclusive server-side execution enhances security by keeping sensitive data and logic, including tokens and API keys,
away from the client-side.

IMPROVED DATA FETCHING: Server Components enhance data fetching efficiency.
Typically, when fetching data on the client-side using useEffect, a child component cannot begin loading its data until the parent component has finished loading its own.
This secuential fetching of data often leads to poor performance.
The main issue is not the round trips themselves, but that these round trips are made from the client to the serer.
Server Components enable applications to shift these sequential round trips to the server side.
By moving this logic to the server, request latency is reduced, and overall performance is improved, eliminating client-server "waterfalls".

CACHING: Rendering on the server enables caching of the results, which can be reused in subsecuent requests and across different users.
This approach can significantly improve performance and reduce consts by minimizing the amout of rendering and data fetching required for each request.

FASTER INITIAL PAGE LOAD AND FIRST CONTENTFUL PAINT: Sixth, Initial Page Load and First Contentful Paint (FCP) are sincificantly improved with Server Components.
By generating HTML on the server, pages become immediately visible to users without the delay of downloading, parsing, and executing JavaScript.

IMPROVED SEO: Regarding Search Engine Optimization (SEO), the server-rendered HTML is fully accessible to search engine bots, enhancing the indexability of your pages.

EFFICIENT STREAMING: Server Components allows the rendering process to be divided into manageable chunks, which re then sreamed to the client as soon as they are ready.
This approach allows users to start seeing parts of the page earlier, eliminating the need to wait for the entire page to finish rendering on the server.

RSC contd.
Server Components take charge of data fetching and static rendering, while Client Components are tasked with rendering the interactive elements of the application.
The bottom line is that the RSC architecture eables React application to leverage the best aspects of both server and client rendering, all while using a single
language, a single framework, and a cohesive set of APIs.

RSC Key Takeaways.
RSC introduce a new way to building React apps by separating components into two types: Server Components and Client Components.
Server Components run only on the server, accessing data and preparing content without being sent to the browser, which makes the app faster for users because less
information needs to download.
They can't manage clicks or interactions directly.
Client Components, on the other hand, work in the user's browser and handle all the interactive parts of the app, like clicking and typing.
They can also be rendered on the server for a fast initial load of the site. This setup helps make websites faster, more secure, and easier for everyone to use, no matter
where they are or what device they're using.

RSC and Next.js 
"This deep dive into the evolution of rendering in React is great, Vishwas, but how exactly does it help understand rendering in Next.js? What's the connection?"
The App Router in Next.js is built around the RSC architecture.
All the features and benefits we've discussed are already baked into the latest version of Next.js.
By understanding the evolution of React's rendering, you now have the necessary background for the rest of this section which will focus on Next.js.